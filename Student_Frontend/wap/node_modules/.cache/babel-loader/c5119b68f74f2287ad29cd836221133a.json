{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeTypeDuplicates;\n\nvar _generated = require(\"../../validators/generated\");\n\nfunction removeTypeDuplicates(nodes) {\n  var generics = {};\n  var bases = {};\n  var typeGroups = [];\n  var types = [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (!node) continue;\n\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    if ((0, _generated.isTSAnyKeyword)(node.type)) {\n      return [node];\n    }\n\n    if ((0, _generated.isTSBaseType)(node)) {\n      bases[node.type] = node;\n      continue;\n    }\n\n    if ((0, _generated.isTSUnionType)(node)) {\n      if (typeGroups.indexOf(node.types) < 0) {\n        nodes = nodes.concat(node.types);\n        typeGroups.push(node.types);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  for (var _i = 0, _Object$keys = Object.keys(bases); _i < _Object$keys.length; _i++) {\n    var type = _Object$keys[_i];\n    types.push(bases[type]);\n  }\n\n  for (var _i2 = 0, _Object$keys2 = Object.keys(generics); _i2 < _Object$keys2.length; _i2++) {\n    var name = _Object$keys2[_i2];\n    types.push(generics[name]);\n  }\n\n  return types;\n}","map":{"version":3,"sources":["/media/allen/SIMBAD/Flaskprojects/Preschool/design/preschool/Student_Frontend/wap/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"],"names":["Object","defineProperty","exports","value","default","removeTypeDuplicates","_generated","require","nodes","generics","bases","typeGroups","types","i","length","node","indexOf","isTSAnyKeyword","type","isTSBaseType","isTSUnionType","concat","push","keys","name"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,oBAAlB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEA,SAASF,oBAAT,CAA8BG,KAA9B,EAAqC;AACnC,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAME,IAAI,GAAGP,KAAK,CAACK,CAAD,CAAlB;AACA,QAAI,CAACE,IAAL,EAAW;;AAEX,QAAIH,KAAK,CAACI,OAAN,CAAcD,IAAd,KAAuB,CAA3B,EAA8B;AAC5B;AACD;;AAED,QAAI,CAAC,GAAGT,UAAU,CAACW,cAAf,EAA+BF,IAAI,CAACG,IAApC,CAAJ,EAA+C;AAC7C,aAAO,CAACH,IAAD,CAAP;AACD;;AAED,QAAI,CAAC,GAAGT,UAAU,CAACa,YAAf,EAA6BJ,IAA7B,CAAJ,EAAwC;AACtCL,MAAAA,KAAK,CAACK,IAAI,CAACG,IAAN,CAAL,GAAmBH,IAAnB;AACA;AACD;;AAED,QAAI,CAAC,GAAGT,UAAU,CAACc,aAAf,EAA8BL,IAA9B,CAAJ,EAAyC;AACvC,UAAIJ,UAAU,CAACK,OAAX,CAAmBD,IAAI,CAACH,KAAxB,IAAiC,CAArC,EAAwC;AACtCJ,QAAAA,KAAK,GAAGA,KAAK,CAACa,MAAN,CAAaN,IAAI,CAACH,KAAlB,CAAR;AACAD,QAAAA,UAAU,CAACW,IAAX,CAAgBP,IAAI,CAACH,KAArB;AACD;;AAED;AACD;;AAEDA,IAAAA,KAAK,CAACU,IAAN,CAAWP,IAAX;AACD;;AAED,kCAAmBf,MAAM,CAACuB,IAAP,CAAYb,KAAZ,CAAnB,kCAAuC;AAAlC,QAAMQ,IAAI,mBAAV;AACHN,IAAAA,KAAK,CAACU,IAAN,CAAWZ,KAAK,CAACQ,IAAD,CAAhB;AACD;;AAED,oCAAmBlB,MAAM,CAACuB,IAAP,CAAYd,QAAZ,CAAnB,qCAA0C;AAArC,QAAMe,IAAI,qBAAV;AACHZ,IAAAA,KAAK,CAACU,IAAN,CAAWb,QAAQ,CAACe,IAAD,CAAnB;AACD;;AAED,SAAOZ,KAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeTypeDuplicates;\n\nvar _generated = require(\"../../validators/generated\");\n\nfunction removeTypeDuplicates(nodes) {\n  const generics = {};\n  const bases = {};\n  const typeGroups = [];\n  const types = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    if ((0, _generated.isTSAnyKeyword)(node.type)) {\n      return [node];\n    }\n\n    if ((0, _generated.isTSBaseType)(node)) {\n      bases[node.type] = node;\n      continue;\n    }\n\n    if ((0, _generated.isTSUnionType)(node)) {\n      if (typeGroups.indexOf(node.types) < 0) {\n        nodes = nodes.concat(node.types);\n        typeGroups.push(node.types);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  for (const type of Object.keys(bases)) {\n    types.push(bases[type]);\n  }\n\n  for (const name of Object.keys(generics)) {\n    types.push(generics[name]);\n  }\n\n  return types;\n}"]},"metadata":{},"sourceType":"script"}