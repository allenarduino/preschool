{"ast":null,"code":"import React from 'react';\n\nclass TakeQuiz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.next_question_handler = () => {\n      const {\n        userAnswer,\n        correct_answer,\n        score\n      } = this.state; //Comparing the userAnswer with the actual correct answer\n\n      if (userAnswer === correct_answer) {\n        this.setState({\n          score: score + 1\n        });\n        this.setState({\n          currentIndex: this.state.currentIndex + 1,\n          userAnswer: null\n        });\n        console.log(this.state.currentIndex);\n      }\n    };\n\n    this.checkAnswer = answer => {\n      this.setState({\n        userAnswer: answer,\n        disabled: false\n      });\n    };\n\n    this.finish_handler = () => {\n      if (this.state.currentIndex === this.state.questions.length - 1) {\n        this.setState({\n          quiz_end: true\n        });\n      }\n    };\n\n    this.state = {\n      userAnswer: null,\n      currentIndex: 0,\n      options: [],\n      score: 0,\n      quiz_end: false,\n      disabled: true //Disables next button if user is yet to select an option\n\n    };\n  } //We load the questions from the server if component mounts\n\n\n  componentDidMount() {\n    const {\n      currentIndex\n    } = this.state;\n    fetch(`http://127.0.0.1:5000/take_quiz/${this.props.match.params.id}`, {\n      method: \"GET\",\n      \"Content-Type\": \"application/json\"\n    }).then(res => res.json()).then(data => {\n      this.setState(() => {\n        return {\n          question: data[this.state.currentIndex].question,\n          correct_answer: data[this.state.currentIndex].correct_answer,\n          options: data[this.state.currentIndex].options\n        };\n      });\n    }).catch(err => console.log(err));\n  } //We need to know the user's answer,the correct answer and the score.\n\n\n  /*Now we update the component................\n  when the compinent updates or when the currrent index changes,\n  we have to set the questions and also disable the disable the\n  options so that the user or student will not click on the options.\n  \n  When the component updates,we are going to load another question and disables\n  the next button until user or student selects an option\n  */\n  componentDidUpdate(Prevprops, prevState) {\n    const {\n      currentIndex\n    } = this.state;\n\n    if (this.state.currentIndex != prevState.currentIndex) {\n      fetch(`http://127.0.0.1:5000/take_quiz/${this.props.match.params.id}`, {\n        method: \"GET\",\n        \"Content-Type\": \"application/json\"\n      }).then(res => res.json()).then(data => {\n        this.setState(() => {\n          return {\n            disabled: true,\n            question: data[this.state.currentIndex].question,\n            options: data[this.state.currentIndex].options,\n            correct_answer: data[this.state.currentIndex].correct_answer\n          };\n        });\n      }).catch(err => console.log(err));\n    }\n  } //Now we render the data into the  UI\n\n\n  render() {\n    const {\n      options,\n      userAnswer,\n      currentIndex,\n      quiz_end\n    } = this.state;\n  }\n\n}\n\nexport default TakeQuiz;","map":{"version":3,"sources":["/media/allen/SIMBAD/Flaskprojects/Preschool/design/preschool/Student_Frontend/wap/src/TakeQuiz.js"],"names":["React","TakeQuiz","Component","constructor","props","next_question_handler","userAnswer","correct_answer","score","state","setState","currentIndex","console","log","checkAnswer","answer","disabled","finish_handler","questions","length","quiz_end","options","componentDidMount","fetch","match","params","id","method","then","res","json","data","question","catch","err","componentDidUpdate","Prevprops","prevState","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nclass TakeQuiz extends React.Component{\n\nconstructor(props){\n    super(props);\n    this.state={\n        userAnswer:null,\n        currentIndex:0,\n        options:[],\n        score:0,\n        quiz_end:false,\n        disabled:true//Disables next button if user is yet to select an option\n\n    }\n\n\n    }\n\n\n\n//We load the questions from the server if component mounts\n\ncomponentDidMount(){\n    const {currentIndex}=this.state;\n    fetch(`http://127.0.0.1:5000/take_quiz/${this.props.match.params.id}`,\n    {\n        method:\"GET\",\n        \"Content-Type\":\"application/json\",\n    }\n    )\n    .then(res=>res.json())\n    .then(data=>{\n       this.setState(()=>{\n           return{\n               question:data[this.state.currentIndex].question,\n               correct_answer:data[this.state.currentIndex].correct_answer,\n               options:data[this.state.currentIndex].options\n           };\n       })\n       \n    })\n    .catch(err=>console.log(err))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n     //We need to know the user's answer,the correct answer and the score.\n\n     next_question_handler=()=>{\n        const {userAnswer,correct_answer,score}=this.state;\n\n        //Comparing the userAnswer with the actual correct answer\n\n        if(userAnswer===correct_answer){\n            this.setState({\n                score:score+1\n            })\n\n            this.setState({\n                currentIndex:this.state.currentIndex+1,\n                userAnswer:null,\n            })\n            console.log(this.state.currentIndex);\n        } \n\n\n    }\n  \n\n    \n   \n\n\n\n\n  \n\n//Function to check check if the student answered  so that we enable or disable next function\n\ncheckAnswer=(answer)=>{\n    this.setState({\n        userAnswer:answer,\n        disabled:false,\n    })\n}\n\n\n\n\n\nfinish_handler=()=>{\n    if(this.state.currentIndex===this.state.questions.length-1){\n        this.setState({\n            quiz_end:true\n        })\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/*Now we update the component................\nwhen the compinent updates or when the currrent index changes,\nwe have to set the questions and also disable the disable the\noptions so that the user or student will not click on the options.\n\nWhen the component updates,we are going to load another question and disables\nthe next button until user or student selects an option\n*/\n\n\ncomponentDidUpdate(Prevprops,prevState){\n    const {currentIndex}=this.state;\n    if(this.state.currentIndex!=prevState.currentIndex){\n       fetch(`http://127.0.0.1:5000/take_quiz/${this.props.match.params.id}`,\n       {\n           method:\"GET\",\n           \"Content-Type\":\"application/json\",\n       }\n       )\n       .then(res=>res.json())\n       .then(data=>{\n         this.setState(()=>{\n             return{\n               disabled:true,\n               question:data[this.state.currentIndex].question,\n               options:data[this.state.currentIndex].options,\n               correct_answer:data[this.state.currentIndex].correct_answer\n             };\n         })\n       })\n       .catch(err=>console.log(err))\n    }\n\n}\n\n\n\n//Now we render the data into the  UI\n\nrender(){\n   const {options,userAnswer,currentIndex,quiz_end}=this.state;\n}\n\n\n\n\n\n\n\n\n}\n\nexport default TakeQuiz;"]},"metadata":{},"sourceType":"module"}