{"ast":null,"code":"var _jsxFileName = \"/media/allen/SIMBAD/Flaskprojects/Preschool/design/preschool/Instructor_Teacher_Frontend/wap/src/EditCourse.js\";\n\n/*e.preventDefault() function in any line will prevent\nthe the form from submitting automatically\n*/\nimport React from 'react';\nimport InstructorLogin from './InstructorLogin';\nimport './Editprofile.css';\n\nclass EditCourse extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.filechangehandler = event => {\n      this.setState({\n        course_img: event.target.files[0]\n      });\n    };\n\n    this.uploadhandler = id => {\n      /*I'm checking to see wether the bio is empty or not\n      If it's  empty, we throw error message*/\n      if (this.state.course_img == null) {\n        this.setState({\n          course_imgerr: \"Photo Required\"\n        });\n      } else {\n        //Otherwise we send the image to the server\n        const formData = new FormData();\n        formData.append(\"course_img\", this.state.course_img);\n        fetch(`http://127.0.0.1:5000/update_course_img/${id}`, {\n          method: \"POST\",\n          body: formData\n        }).then(res => {\n          alert(\"Course Image Updated\");\n        }).catch(err => {\n          alert(err);\n        });\n      }\n    };\n\n    this.descriptionhandler = e => {\n      this.setState({\n        course_description: e.target.value\n      });\n    };\n\n    this.submitdescription = id => {\n      /*I'm checking to see wether the bio is empty or not\n      If it's  empty, we throw error message*/\n      if (this.state.course_description.trim() === \"\") {\n        this.setState({\n          description_err: \"Description Required\"\n        });\n      } else {\n        //Otherwise,we send data to the server\n        fetch(`http://127.0.0.1:5000/update_course_description/${id}`, {\n          method: \"POST\",\n          body: JSON.stringify(this.state.course_description),\n          \"Content-type\": \"application/json\"\n        }).then(res => res.json()).then(data => {\n          alert(data.message);\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    };\n\n    this.namehandler = e => {\n      this.setState({\n        course_name: e.target.value\n      });\n    };\n\n    this.submitname = id => {\n      /*I'm checking to see wether the name is empty or not\n      If it's  empty, we throw error message*/\n      if (this.state.course_name.trim() === \"\") {\n        this.setState({\n          course_nameerr: \"Name of course required\"\n        });\n      } else {\n        //Otherwise ,we send data to the server\n        fetch(`http://127.0.0.1:5000/update_course_name/${id}`, {\n          method: \"POST\",\n          \"Content-Type\": \"Application/json\",\n          body: JSON.stringify(this.state.course_name)\n        }).then(res => res.json()).then(data => {\n          alert(data.message);\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    };\n\n    this.delete_course = id => {\n      if (window.confirm(\"Are you sure you want to delete this course\")) {\n        fetch(`http://127.0.0.1:5000/course_delete/${id}`, {\n          method: \"DELETE\"\n        }).then(res => res.json()).then(data => {\n          console.log(\" Course Deleted\");\n        });\n      }\n    };\n\n    this.state = {\n      course_img: null,\n      course_description: \"\",\n      course_name: \"\",\n      course_nameerr: \"\",\n      description_err: \"\",\n      course_imgerr: \"\",\n      course: []\n    };\n  }\n  /*I'm setting this componentDidMount because \n  I want to grab the id of the course\n  */\n\n\n  componentDidMount() {\n    fetch(`http://127.0.0.1:5000/courses/${this.props.match.params.id}`, {\n      methods: \"GET\",\n      \"Content-Type\": \"application/json\"\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        course: data.description\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }, this.state.course.map(t => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 40\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        flexDirection: \"row\"\n      },\n      className: \"col text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        marginTop: 100,\n        textAlign: \"center\",\n        fontSize: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }\n    }, \"Update Course Image\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.filechangehandler,\n      type: \"file\",\n      name: \"course_img\",\n      className: \"inputfile1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.uploadhandler(t.id),\n      className: \"upload-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, \"Upload\"), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: \"red\",\n        fontSize: 18\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }\n    }, this.state.course_imgerr)), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        flexDirection: \"row\"\n      },\n      className: \"col text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        marginTop: 30,\n        textAlign: \"center\",\n        fontSize: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }\n    }, \"Update Name of Course\"), /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"Name\",\n      value: this.state.course_name,\n      onChange: this.namehandler,\n      type: \"text\",\n      name: \"course_name\",\n      className: \"nameinput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.submitname(t.id),\n      className: \"namebutton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }\n    }, \"Update\"), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: \"red\",\n        fontSize: 18\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }, this.state.course_nameerr)), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        flexDirection: \"row\"\n      },\n      className: \"col text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        marginTop: 30,\n        textAlign: \"center\",\n        fontSize: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    }, \"Update Course Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      placeholder: \"Description\",\n      value: this.state.description,\n      onChange: this.descriptionhandler,\n      type: \"text\",\n      name: \"course_description\",\n      className: \"nameinput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.submitdescription(t.id),\n      className: \"namebutton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, \"Update\"), /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        color: \"red\",\n        fontSize: 18\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }\n    }, this.state.description_err)), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: 100\n      },\n      className: \" col text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        this.delete_course(t.id);\n      },\n      className: \"delete-course\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, \"Delete Course\")))));\n  }\n\n}\n\nexport default EditCourse;","map":{"version":3,"sources":["/media/allen/SIMBAD/Flaskprojects/Preschool/design/preschool/Instructor_Teacher_Frontend/wap/src/EditCourse.js"],"names":["React","InstructorLogin","EditCourse","Component","constructor","props","filechangehandler","event","setState","course_img","target","files","uploadhandler","id","state","course_imgerr","formData","FormData","append","fetch","method","body","then","res","alert","catch","err","descriptionhandler","e","course_description","value","submitdescription","trim","description_err","JSON","stringify","json","data","message","console","log","namehandler","course_name","submitname","course_nameerr","delete_course","window","confirm","course","componentDidMount","match","params","methods","description","render","map","t","flexDirection","marginTop","textAlign","fontSize","color"],"mappings":"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","sourcesContent":["/*e.preventDefault() function in any line will prevent\nthe the form from submitting automatically\n*/\n\n\nimport React from 'react';\nimport InstructorLogin from './InstructorLogin';\nimport './Editprofile.css';\n\nclass EditCourse extends React.Component{\n\n   \nconstructor(props){\n    super(props);\n    this.state={\n        course_img:null,\n        course_description:\"\",\n        course_name:\"\",\n        course_nameerr:\"\",\n        description_err:\"\",\n        course_imgerr:\"\",\n        course:[]\n        \n    }\n}\n\n\n\n/*I'm setting this componentDidMount because \nI want to grab the id of the course\n*/\n\n\ncomponentDidMount(){\n    fetch(`http://127.0.0.1:5000/courses/${this.props.match.params.id}`,\n  {\n      methods:\"GET\",\n      \"Content-Type\":\"application/json\"\n  }\n    )\n    .then(res=>res.json())\n    .then(data=>{\n       this.setState({\n        course:data.description\n       })\n    })\n \n  }\n\n\n\n\n\n\n\nfilechangehandler=(event)=>{\n    this.setState({course_img:event.target.files[0]})\n  }\n\n  uploadhandler=(id)=>{\n\n    \n\n  \n     /*I'm checking to see wether the bio is empty or not\n    If it's  empty, we throw error message*/\n   if(this.state.course_img==null){\n    this.setState({\n        course_imgerr:\"Photo Required\"\n    })\n}\n   else{\n   //Otherwise we send the image to the server\n   const formData=new FormData();\n   formData.append(\"course_img\",this.state.course_img)\n   \n   fetch(`http://127.0.0.1:5000/update_course_img/${id}`,\n   {\n     method:\"POST\",\n     body:formData,\n    \n   }\n   ).then(res=>{alert(\"Course Image Updated\")}).catch(err=>{alert(err)})\n}\n  }\n\n\n\n\n  \n\ndescriptionhandler=(e)=>{\n    this.setState({\n        course_description:e.target.value\n    })\n}\n\n\n\nsubmitdescription=(id)=>{\n   \n    /*I'm checking to see wether the bio is empty or not\n    If it's  empty, we throw error message*/\n    if (this.state.course_description.trim()===\"\"){\n        this.setState({\n            description_err:\"Description Required\"\n         })\n    }\n    else{\n        //Otherwise,we send data to the server\n\n    fetch(`http://127.0.0.1:5000/update_course_description/${id}`,{\n        method:\"POST\",\n         body:JSON.stringify(this.state.course_description),\n         \"Content-type\":\"application/json\",\n\n    \n    \n   \n}\n    )\n    .then(res=>res.json())\n    .then(data=>{\n        alert(data.message)\n    })\n    .catch(err=>{console.log(err)})\n}\n    \n}\n\n\n\nnamehandler=(e)=>{\n    this.setState({\n        course_name:e.target.value\n    })\n}\n\n\n\n\nsubmitname=(id)=>{\n    \n        /*I'm checking to see wether the name is empty or not\n    If it's  empty, we throw error message*/\n    if (this.state.course_name.trim()===\"\"){\n        this.setState({\n            course_nameerr:\"Name of course required\"\n         })\n    }\n    else{\n\n    //Otherwise ,we send data to the server\n\n    fetch(`http://127.0.0.1:5000/update_course_name/${id}`,{\n        method:\"POST\",\n        \"Content-Type\":\"Application/json\",\n         body:JSON.stringify(this.state.course_name),\n    \n    \n\n}\n    )\n    .then(res=>res.json())\n    .then(data=>{\n        alert(data.message)\n    }).catch(err=>{console.log(err)})\n} \n}\n\n\n\n\n\ndelete_course=(id)=>{\n    if (window.confirm(\"Are you sure you want to delete this course\")){\n\n    \n    fetch(`http://127.0.0.1:5000/course_delete/${id}`,\n    {\n      method:\"DELETE\"\n    }\n    )\n    .then(res=>res.json())\n    .then(data=>{\n      console.log(\" Course Deleted\")\n    })\n  }\n\n}\n\n\n\n\n\n\n\n\n \n\n  render(){\n      return(\n          \n        \n\n          \n          <div>\n                 \n                 {\n              this.state.course.map(t=><div>\n\n<div style={{flexDirection:\"row\"}} className=\"col text-center\">\n          <h3 style={{marginTop:100,textAlign:\"center\",fontSize:20}}>Update Course Image</h3>\n          <input onChange={this.filechangehandler} type=\"file\" name=\"course_img\" className=\"inputfile1\"/>\n          <button onClick={()=>this.uploadhandler(t.id)} className=\"upload-button\">Upload</button>\n          <h3 style={{color:\"red\",fontSize:18}}>{this.state.course_imgerr}</h3>\n          </div>\n\n        \n\n        \n         \n         \n\n          <div style={{flexDirection:\"row\"}} className=\"col text-center\">\n          <h3 style={{marginTop:30,textAlign:\"center\",fontSize:20}}>Update Name of Course</h3>\n          <input  placeholder=\"Name\"value={this.state.course_name} onChange={this.namehandler} type=\"text\" name=\"course_name\" className=\"nameinput\"/>\n          <button onClick={()=>this.submitname(t.id)} className=\"namebutton\">Update</button>\n          <h3 style={{color:\"red\",fontSize:18}}>{this.state.course_nameerr}</h3>\n          </div>\n\n\n          <div style={{flexDirection:\"row\"}} className=\"col text-center\">\n          <h3 style={{marginTop:30,textAlign:\"center\",fontSize:20}}>Update Course Description</h3>\n          <textarea  placeholder=\"Description\"value={this.state.description} onChange={this.descriptionhandler} type=\"text\" name=\"course_description\" className=\"nameinput\"/>\n          <button onClick={()=>this.submitdescription(t.id)} className=\"namebutton\">Update</button>\n          <h3 style={{color:\"red\",fontSize:18}}>{this.state.description_err}</h3>\n          </div>\n       \n          \n        \n\n         \n\n        \n    <div style={{marginTop:100}} className=\" col text-center\">\n        <button onClick={()=>{this.delete_course(t.id)}} className=\"delete-course\">Delete Course</button>\n    </div>\n\n\n\n\n                   </div>\n              )\n                  \n            }\n            \n              \n          </div>\n\n      )\n  }\n\n}\n\nexport default EditCourse;"]},"metadata":{},"sourceType":"module"}